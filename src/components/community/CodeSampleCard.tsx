'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Heart, 
  Download, 
  Eye, 
  Code, 
  Star, 
  Copy,
  ExternalLink,
  Tag,
  User,
  Calendar
} from 'lucide-react';

interface CodeSample {
  id: string;
  title: string;
  description: string;
  author: {
    name: string;
    avatar: string;
    verified: boolean;
  };
  tags: string[];
  framework: 'react' | 'vue' | 'plain' | 'angular';
  preview_image: string;
  preview_url: string;
  code: {
    html: string;
    css: string;
    js: string;
  };
  stats: {
    likes: number;
    downloads: number;
    views: number;
    rating: number;
  };
  license: 'MIT' | 'CC-BY' | 'proprietary';
  created_at: Date;
  updated_at: Date;
}

interface CodeSampleCardProps {
  sample: CodeSample;
  onLike?: (id: string) => void;
  onDownload?: (id: string) => void;
  onView?: (id: string) => void;
}

export default function CodeSampleCard({ 
  sample, 
  onLike, 
  onDownload, 
  onView 
}: CodeSampleCardProps) {
  const [isLiked, setIsLiked] = useState(false);
  const [showCode, setShowCode] = useState(false);

  const handleLike = () => {
    setIsLiked(!isLiked);
    onLike?.(sample.id);
  };

  const handleDownload = () => {
    onDownload?.(sample.id);
    
    // Create downloadable files
    const files = {
      'index.html': sample.code.html,
      'styles.css': sample.code.css,
      'script.js': sample.code.js,
      'README.md': `# ${sample.title}

${sample.description}

## Author
${sample.author.name}

## Framework
${sample.framework}

## Tags
${sample.tags.join(', ')}

## License
${sample.license}

## Usage
1. Download all files
2. Open index.html in your browser
3. Customize the code as needed

Generated by Open Design Community
`
    };

    // Download each file
    Object.entries(files).forEach(([filename, content]) => {
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.click();
      URL.revokeObjectURL(url);
    });
  };

  const copyCode = (code: string) => {
    navigator.clipboard.writeText(code);
  };

  const getFrameworkColor = (framework: string) => {
    switch (framework) {
      case 'react': return 'bg-blue-100 text-blue-800';
      case 'vue': return 'bg-green-100 text-green-800';
      case 'angular': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <motion.div
      whileHover={{ y: -2 }}
      className="bg-surface-container border border-border rounded-lg overflow-hidden group"
    >
      {/* Preview Image */}
      <div className="relative aspect-video bg-muted">
        <img 
          src={sample.preview_image} 
          alt={sample.title}
          className="w-full h-full object-cover"
          onError={(e) => {
            (e.target as HTMLImageElement).src = '/api/placeholder/400/225';
          }}
        />
        <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors flex items-center justify-center opacity-0 group-hover:opacity-100">
          <button
            onClick={() => onView?.(sample.id)}
            className="flex items-center gap-2 px-4 py-2 bg-white/90 text-gray-900 rounded-lg hover:bg-white transition-colors"
          >
            <Eye className="w-4 h-4" />
            Preview
          </button>
        </div>
        
        {/* Framework Badge */}
        <div className="absolute top-3 left-3">
          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getFrameworkColor(sample.framework)}`}>
            {sample.framework.toUpperCase()}
          </span>
        </div>

        {/* Rating */}
        <div className="absolute top-3 right-3 flex items-center gap-1 bg-black/50 text-white px-2 py-1 rounded-full text-xs">
          <Star className="w-3 h-3 fill-yellow-400 text-yellow-400" />
          {sample.stats.rating.toFixed(1)}
        </div>
      </div>

      {/* Content */}
      <div className="p-4">
        <div className="flex items-start justify-between mb-2">
          <h3 className="font-semibold text-foreground line-clamp-1">{sample.title}</h3>
          <button
            onClick={handleLike}
            className={`p-1 rounded transition-colors ${
              isLiked ? 'text-red-500' : 'text-muted-foreground hover:text-red-500'
            }`}
          >
            <Heart className={`w-4 h-4 ${isLiked ? 'fill-current' : ''}`} />
          </button>
        </div>

        <p className="text-sm text-muted-foreground mb-3 line-clamp-2">
          {sample.description}
        </p>

        {/* Author */}
        <div className="flex items-center gap-2 mb-3">
          <img 
            src={sample.author.avatar} 
            alt={sample.author.name}
            className="w-6 h-6 rounded-full"
            onError={(e) => {
              (e.target as HTMLImageElement).src = '/api/placeholder/24/24';
            }}
          />
          <span className="text-sm text-muted-foreground">{sample.author.name}</span>
          {sample.author.verified && (
            <div className="w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center">
              <svg className="w-2 h-2 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
              </svg>
            </div>
          )}
        </div>

        {/* Tags */}
        <div className="flex flex-wrap gap-1 mb-3">
          {sample.tags.slice(0, 3).map((tag) => (
            <span 
              key={tag}
              className="px-2 py-1 bg-muted text-muted-foreground rounded text-xs"
            >
              #{tag}
            </span>
          ))}
          {sample.tags.length > 3 && (
            <span className="px-2 py-1 bg-muted text-muted-foreground rounded text-xs">
              +{sample.tags.length - 3}
            </span>
          )}
        </div>

        {/* Stats */}
        <div className="flex items-center justify-between text-xs text-muted-foreground mb-3">
          <div className="flex items-center gap-3">
            <span className="flex items-center gap-1">
              <Heart className="w-3 h-3" />
              {sample.stats.likes}
            </span>
            <span className="flex items-center gap-1">
              <Download className="w-3 h-3" />
              {sample.stats.downloads}
            </span>
            <span className="flex items-center gap-1">
              <Eye className="w-3 h-3" />
              {sample.stats.views}
            </span>
          </div>
          <span className="flex items-center gap-1">
            <Calendar className="w-3 h-3" />
            {sample.created_at.toLocaleDateString()}
          </span>
        </div>

        {/* Actions */}
        <div className="flex gap-2">
          <button
            onClick={handleDownload}
            className="flex-1 flex items-center justify-center gap-2 px-3 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors text-sm"
          >
            <Download className="w-4 h-4" />
            Download
          </button>
          <button
            onClick={() => setShowCode(!showCode)}
            className="px-3 py-2 border border-border rounded-lg hover:bg-surface-variant transition-colors"
          >
            <Code className="w-4 h-4" />
          </button>
          <button className="px-3 py-2 border border-border rounded-lg hover:bg-surface-variant transition-colors">
            <ExternalLink className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Code Preview */}
      {showCode && (
        <motion.div
          initial={{ height: 0, opacity: 0 }}
          animate={{ height: 'auto', opacity: 1 }}
          exit={{ height: 0, opacity: 0 }}
          className="border-t border-border"
        >
          <div className="p-4 space-y-3">
            <div className="flex items-center justify-between">
              <h4 className="text-sm font-medium text-foreground">Code Preview</h4>
              <div className="flex gap-1">
                <button
                  onClick={() => copyCode(sample.code.html)}
                  className="p-1 hover:bg-surface-variant rounded text-xs"
                  title="Copy HTML"
                >
                  HTML
                </button>
                <button
                  onClick={() => copyCode(sample.code.css)}
                  className="p-1 hover:bg-surface-variant rounded text-xs"
                  title="Copy CSS"
                >
                  CSS
                </button>
                <button
                  onClick={() => copyCode(sample.code.js)}
                  className="p-1 hover:bg-surface-variant rounded text-xs"
                  title="Copy JS"
                >
                  JS
                </button>
              </div>
            </div>
            
            <div className="bg-muted rounded p-3 text-xs font-mono overflow-x-auto">
              <pre className="text-muted-foreground">
                {sample.code.html.slice(0, 200)}...
              </pre>
            </div>
          </div>
        </motion.div>
      )}
    </motion.div>
  );
}